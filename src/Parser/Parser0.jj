PARSER_BEGIN(Parser)
package Parser;
import environment.Environment;
import ast.*;
import java.util.Map;
import java.util.TreeMap;
import compiler.CodeBlock;
import java.io.PrintStream;
import java.io.FileOutputStream;

/** ID lister. */
public class Parser {

  /** Main entry point. */
  public static void main(String args[]) {
    Parser parser = new Parser(System.in);
    ASTNode exp;

    while (true) {
    try {
    exp = parser.Start();
    Environment baseEnv = new Environment(null);
    exp.eval(baseEnv);
    //System.out.println( exp.eval(baseEnv) );
    PrintStream output = new PrintStream(new FileOutputStream("compiler.j"));
    CodeBlock cb = new CodeBlock(output);
    exp.compile(cb, baseEnv);
   	cb.dump(output);
    } catch (Exception e) {
      e.printStackTrace();
      System.out.println ("Syntax Error!");
      parser.ReInit(System.in);
    }
    }
  }

}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
}

TOKEN :
{
  < DEF: "def">
  |
  < IN : "in" >
  | 
  < END: "end">
  |
  < PRINTLN: "println" >
  |
  < PRINT: "print" >
  |
  < NEW: "new" >
  |
  < IF: "if" >
  |
  < THEN: "then" >
  |
  < ELSE: "else" >
  |
  < WHILE: "while" >
  |
  < DO: "do" >
  |
  < TRUE: "true" >
  |
  < FALSE: "false" >
  |
  < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
  |
  < Num: (["0"-"9"]) + >
  |
  < BOOL: "bool" >
  |
  < AND: "&&" >
  |
  < OR: "||" >
  |
  < NOT: "~" >
  |
  < EQTO: "==" >
  |
  < MTHAN: ">" >
  |
  < MEQTHAN: ">=" >
  |
  < LTHAN: "<" >
  |
  < LEQTHAN: "<=" >
  |
  < ASSIGN: ":=" >
  |
  < SEQ: ";" >
  |
  < MOD: "%" >
  |
  < DIV : "/" >
  |
  < PLUS : "+" >
  |
  < MINUS : "-">
  |
  < TIMES : "*">
  |
  < LPAR : "(" >
  |
  < RPAR : ")" >
  |
  < EL: "\n" >
  |
  < EQ: "="	>
  |
  < REF: "!" > 
}

ASTNode Start():
{ ASTNode t; }
{
   t = Sequence() <EL>
   { return t; }
}

ASTNode Exp() :
{ Token op;
  ASTNode t1, t2; }
{
     t1=Term() ( ( op=<PLUS> | op=<MINUS> ) t2=Term() 
                 { if (op.kind == PLUS) 
                         t1 = new ASTPlus(t1,t2);
                   else  t1 = new ASTSub(t1,t2);
                 } 
               ) *
     { return t1; } 
}

ASTNode Term() :
{
  Token op;
  ASTNode t1, t2;
}
{
     t1 = Fact() ( op = < ASSIGN > t2 = Bool_exp()
       {
         t1 = new ASTAssign(t1, t2);
       }
     |
     (       
       ( op=<TIMES> | op=<DIV> | op=<MOD>)
       t2 = Term()
       {
 		 if(op.kind == TIMES)
 		 	t1 = new ASTMult(t1, t2);
 		 else if(op.kind == DIV)
 		 	t1 = new ASTDiv(t1, t2);
	 	 else if(op.kind == MOD)
         	t1 = new ASTMod(t1, t2);
        }
      )*
    )
     { return t1; } 
}

ASTNode Bool_exp() :
{
   Token op;
   ASTNode t1, t2;
}
{
	t1 = Exp() (	( op = < MTHAN > | op = < MEQTHAN > | op = < LTHAN > | op = < LEQTHAN > | op = < EQTO >)
	t2 = Exp()
	{
	  if(op.kind == EQTO)
	  	t1 = new ASTEq(t1, t2);
	  else
	  	t1 = new ASTIneq(t1, t2, op.image);
	}
  	)?
    { return t1; }
}

ASTNode Sequence() :
{
  Token op;
  ASTNode t1, t2;
}
{
  t1 = Bool_exp()(
    ( op = < SEQ > | op = < OR > | op = < AND > )
  t2 = Sequence()
	  {
	    if(op.kind == SEQ)
	    	t1 = new ASTSeq(t1, t2);
	    else if (op.kind == OR)
	    	t1 = new ASTOr(t1, t2);
	    else if (op.kind == AND)
	    	t1 = new ASTAnd(t1, t2);
	  }
  )*
  {
    return t1;
  }
}

ASTNode Fact() :
{ Token n; 
  ASTNode t, t1, t2;
  Map<String, ASTNode> vars = new TreeMap<String, ASTNode>();
  Map<String, ASTNode> list = new TreeMap<String, ASTNode >();
}
{
   ( n=<Num> { t = new ASTNum(Integer.parseInt(n.image)); }
   | <LPAR> t=Exp() <RPAR>
   | n = <Id> { t = new ASTId(n.image);}
   | < DEF > (n=< Id > < EQ > t1=Sequence() {vars.put(n.image, t1); list.put(n.image, t1);})+ < IN > t2=Sequence() < END > { t = new ASTDef(vars, t2, list); }
   | < MINUS > t=Fact() { t = new ASTNeg(t); }
   | < NEW > t=Fact() { t = new ASTNew(t); }
   | < REF > t=Fact() { t = new ASTRef(t); }
   | < PRINT > t=Exp() { t = new ASTPrint(t, false); }
   | < PRINTLN > t= Exp() { t = new ASTPrint(t, true); }
   | < TRUE > { t = new ASTBool(true); }
   | < FALSE > { t = new ASTBool(false); }
   | < NOT > t = Bool_exp() { t = new ASTNot(t); }
   | < IF > t = Bool_exp() < THEN > t1 = Sequence() < ELSE > t2 = Sequence() < END > { t = new ASTIf(t, t1, t2); }
   | < WHILE > t = Bool_exp() < DO > t1 = Sequence() < END > { t = new ASTWhile(t, t1); }
   )
   { return t; }
}





















