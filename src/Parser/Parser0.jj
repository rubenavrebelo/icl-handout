PARSER_BEGIN(Parser)
package Parser;
import AST.Environment.Environment;

/** ID lister. */
public class Parser {

  /** Main entry point. */
  public static void main(String args[]) {
    Parser parser = new Parser(System.in);
    ASTNode exp;

    while (true) {
    try {
    exp = parser.Start();
    Environment baseEnv = new Environment(null);
    System.out.println( exp.eval() );
    } catch (Exception e) {
      System.out.println ("Syntax Error!");
      parser.ReInit(System.in);
    }
    }
  }

}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
}

TOKEN :
{
  < DEF: "def">
  |
  < IN : "in" >
  | 
  < END: "end">
  |
  < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
  |
  < Num: (["0"-"9"]) + >
  |
  < DIV : "/" >
  |
  < MULT: "*" >
  |
  < PLUS : "+" >
  |
  < MINUS : "-">
  |
  < TIMES : "*">
  |
  < DIV : "/">
  |
  < LPAR : "(" >
  |
  < RPAR : ")" >
  |
  < EL: "\n" >
  |
  < EQ: "="	>
}

ASTNode Start():
{ ASTNode t; }
{
   t = Exp() <EL>
   { return t; }
}

ASTNode Exp() :
{ Token op;
  ASTNode t1, t2; }
{
     t1=Term() ( ( op=<PLUS> | op=<MINUS> ) t2=Term() 
                 { if (op.kind == PLUS) 
                         t1 = new ASTPlus(t1,t2);
                   else  t1 = new ASTSub(t1,t2);
                 } 
               ) *
     { return t1; } 
}

ASTNode Term() :
{
  Token op;
  ASTNode t1, t2;
}
{
     t1 = Fact() (
    ( op=<TIMES> | op=<DIV> ) 
    t2 = Term() 
 		 {
 		 if(op.kind === TIMES)
 		 	t1 = new ASTMult(t1, t2);
 		 else
 		 	t1 = new ASTDiv(t1, t2);
         } 
		)*
     { return t1; } 
}


ASTNode Fact() :
{ Token n; 
  ASTNode t;
}
{
   ( n=<Num> { t = new ASTNum(Integer.parseInt(n.image)); }
   | <LPAR> t=Exp() <RPAR>
   | n = <Id> { t = new ASTId(n.image)}
   | < DEF > n=< Id > < EQ > t=Exp() < IN > t1=Exp() < END > { t = new ASTDef(n.image, t, t1); }
   | < MINUS > t=Fact() { t = new ASTNeg(t); })
   { return t; }
}





















